/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"encoding/json"
)

// UpdateModel struct for UpdateModel
type UpdateModel struct {
	EditId    *int32  `json:"edit_id,omitempty"`
	GameId    *int32  `json:"game_id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Type      *string `json:"type,omitempty"`
	Value     *string `json:"value,omitempty"`
}

// NewUpdateModel instantiates a new UpdateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateModel() *UpdateModel {
	this := UpdateModel{}
	return &this
}

// NewUpdateModelWithDefaults instantiates a new UpdateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateModelWithDefaults() *UpdateModel {
	this := UpdateModel{}
	return &this
}

// GetEditId returns the EditId field value if set, zero value otherwise.
func (o *UpdateModel) GetEditId() int32 {
	if o == nil || o.EditId == nil {
		var ret int32
		return ret
	}
	return *o.EditId
}

// GetEditIdOk returns a tuple with the EditId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateModel) GetEditIdOk() (*int32, bool) {
	if o == nil || o.EditId == nil {
		return nil, false
	}
	return o.EditId, true
}

// HasEditId returns a boolean if a field has been set.
func (o *UpdateModel) HasEditId() bool {
	if o != nil && o.EditId != nil {
		return true
	}

	return false
}

// SetEditId gets a reference to the given int32 and assigns it to the EditId field.
func (o *UpdateModel) SetEditId(v int32) {
	o.EditId = &v
}

// GetGameId returns the GameId field value if set, zero value otherwise.
func (o *UpdateModel) GetGameId() int32 {
	if o == nil || o.GameId == nil {
		var ret int32
		return ret
	}
	return *o.GameId
}

// GetGameIdOk returns a tuple with the GameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateModel) GetGameIdOk() (*int32, bool) {
	if o == nil || o.GameId == nil {
		return nil, false
	}
	return o.GameId, true
}

// HasGameId returns a boolean if a field has been set.
func (o *UpdateModel) HasGameId() bool {
	if o != nil && o.GameId != nil {
		return true
	}

	return false
}

// SetGameId gets a reference to the given int32 and assigns it to the GameId field.
func (o *UpdateModel) SetGameId(v int32) {
	o.GameId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UpdateModel) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateModel) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UpdateModel) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *UpdateModel) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateModel) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateModel) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateModel) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateModel) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UpdateModel) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateModel) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UpdateModel) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UpdateModel) SetValue(v string) {
	o.Value = &v
}

func (o UpdateModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EditId != nil {
		toSerialize["edit_id"] = o.EditId
	}
	if o.GameId != nil {
		toSerialize["game_id"] = o.GameId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateModel struct {
	value *UpdateModel
	isSet bool
}

func (v NullableUpdateModel) Get() *UpdateModel {
	return v.value
}

func (v *NullableUpdateModel) Set(val *UpdateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateModel(val *UpdateModel) *NullableUpdateModel {
	return &NullableUpdateModel{value: val, isSet: true}
}

func (v NullableUpdateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
