/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"encoding/json"
)

// GamesByGameIDAllOfData struct for GamesByGameIDAllOfData
type GamesByGameIDAllOfData struct {
	Count int32  `json:"count"`
	Games []Game `json:"games"`
}

// NewGamesByGameIDAllOfData instantiates a new GamesByGameIDAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamesByGameIDAllOfData(count int32, games []Game) *GamesByGameIDAllOfData {
	this := GamesByGameIDAllOfData{}
	this.Count = count
	this.Games = games
	return &this
}

// NewGamesByGameIDAllOfDataWithDefaults instantiates a new GamesByGameIDAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamesByGameIDAllOfDataWithDefaults() *GamesByGameIDAllOfData {
	this := GamesByGameIDAllOfData{}
	return &this
}

// GetCount returns the Count field value
func (o *GamesByGameIDAllOfData) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GamesByGameIDAllOfData) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *GamesByGameIDAllOfData) SetCount(v int32) {
	o.Count = v
}

// GetGames returns the Games field value
func (o *GamesByGameIDAllOfData) GetGames() []Game {
	if o == nil {
		var ret []Game
		return ret
	}

	return o.Games
}

// GetGamesOk returns a tuple with the Games field value
// and a boolean to check if the value has been set.
func (o *GamesByGameIDAllOfData) GetGamesOk() ([]Game, bool) {
	if o == nil {
		return nil, false
	}
	return o.Games, true
}

// SetGames sets field value
func (o *GamesByGameIDAllOfData) SetGames(v []Game) {
	o.Games = v
}

func (o GamesByGameIDAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["games"] = o.Games
	}
	return json.Marshal(toSerialize)
}

type NullableGamesByGameIDAllOfData struct {
	value *GamesByGameIDAllOfData
	isSet bool
}

func (v NullableGamesByGameIDAllOfData) Get() *GamesByGameIDAllOfData {
	return v.value
}

func (v *NullableGamesByGameIDAllOfData) Set(val *GamesByGameIDAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableGamesByGameIDAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableGamesByGameIDAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamesByGameIDAllOfData(val *GamesByGameIDAllOfData) *NullableGamesByGameIDAllOfData {
	return &NullableGamesByGameIDAllOfData{value: val, isSet: true}
}

func (v NullableGamesByGameIDAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamesByGameIDAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
