/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"encoding/json"
)

// GamesUpdatesAllOfData struct for GamesUpdatesAllOfData
type GamesUpdatesAllOfData struct {
	Count   int32         `json:"count"`
	Updates []UpdateModel `json:"updates"`
}

// NewGamesUpdatesAllOfData instantiates a new GamesUpdatesAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamesUpdatesAllOfData(count int32, updates []UpdateModel) *GamesUpdatesAllOfData {
	this := GamesUpdatesAllOfData{}
	this.Count = count
	this.Updates = updates
	return &this
}

// NewGamesUpdatesAllOfDataWithDefaults instantiates a new GamesUpdatesAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamesUpdatesAllOfDataWithDefaults() *GamesUpdatesAllOfData {
	this := GamesUpdatesAllOfData{}
	return &this
}

// GetCount returns the Count field value
func (o *GamesUpdatesAllOfData) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GamesUpdatesAllOfData) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *GamesUpdatesAllOfData) SetCount(v int32) {
	o.Count = v
}

// GetUpdates returns the Updates field value
func (o *GamesUpdatesAllOfData) GetUpdates() []UpdateModel {
	if o == nil {
		var ret []UpdateModel
		return ret
	}

	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value
// and a boolean to check if the value has been set.
func (o *GamesUpdatesAllOfData) GetUpdatesOk() ([]UpdateModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updates, true
}

// SetUpdates sets field value
func (o *GamesUpdatesAllOfData) SetUpdates(v []UpdateModel) {
	o.Updates = v
}

func (o GamesUpdatesAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["updates"] = o.Updates
	}
	return json.Marshal(toSerialize)
}

type NullableGamesUpdatesAllOfData struct {
	value *GamesUpdatesAllOfData
	isSet bool
}

func (v NullableGamesUpdatesAllOfData) Get() *GamesUpdatesAllOfData {
	return v.value
}

func (v *NullableGamesUpdatesAllOfData) Set(val *GamesUpdatesAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableGamesUpdatesAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableGamesUpdatesAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamesUpdatesAllOfData(val *GamesUpdatesAllOfData) *NullableGamesUpdatesAllOfData {
	return &NullableGamesUpdatesAllOfData{value: val, isSet: true}
}

func (v NullableGamesUpdatesAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamesUpdatesAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
