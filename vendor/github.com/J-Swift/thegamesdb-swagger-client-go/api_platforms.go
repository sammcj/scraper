/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// PlatformsApiService PlatformsApi service
type PlatformsApiService service

type ApiPlatformsRequest struct {
	ctx        context.Context
	ApiService *PlatformsApiService
	apikey     *string
	fields     *string
}

// (Required)
func (r ApiPlatformsRequest) Apikey(apikey string) ApiPlatformsRequest {
	r.apikey = &apikey
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60;
func (r ApiPlatformsRequest) Fields(fields string) ApiPlatformsRequest {
	r.fields = &fields
	return r
}

func (r ApiPlatformsRequest) Execute() (*Platforms, *http.Response, error) {
	return r.ApiService.PlatformsExecute(r)
}

/*
Platforms Fetch platforms list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPlatformsRequest
*/
func (a *PlatformsApiService) Platforms(ctx context.Context) ApiPlatformsRequest {
	return ApiPlatformsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return Platforms
func (a *PlatformsApiService) PlatformsExecute(r ApiPlatformsRequest) (*Platforms, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Platforms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformsApiService.Platforms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Platforms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlatformsByPlatformIDRequest struct {
	ctx        context.Context
	ApiService *PlatformsApiService
	apikey     *string
	id         *int32
	fields     *string
}

// (Required)
func (r ApiPlatformsByPlatformIDRequest) Apikey(apikey string) ApiPlatformsByPlatformIDRequest {
	r.apikey = &apikey
	return r
}

// (Required) - supports &#x60;,&#x60; delimited list
func (r ApiPlatformsByPlatformIDRequest) Id(id int32) ApiPlatformsByPlatformIDRequest {
	r.id = &id
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60;
func (r ApiPlatformsByPlatformIDRequest) Fields(fields string) ApiPlatformsByPlatformIDRequest {
	r.fields = &fields
	return r
}

func (r ApiPlatformsByPlatformIDRequest) Execute() (*PlatformsByPlatformID, *http.Response, error) {
	return r.ApiService.PlatformsByPlatformIDExecute(r)
}

/*
PlatformsByPlatformID Fetch platforms list by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPlatformsByPlatformIDRequest
*/
func (a *PlatformsApiService) PlatformsByPlatformID(ctx context.Context) ApiPlatformsByPlatformIDRequest {
	return ApiPlatformsByPlatformIDRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return PlatformsByPlatformID
func (a *PlatformsApiService) PlatformsByPlatformIDExecute(r ApiPlatformsByPlatformIDRequest) (*PlatformsByPlatformID, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PlatformsByPlatformID
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformsApiService.PlatformsByPlatformID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Platforms/ByPlatformID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlatformsByPlatformNameRequest struct {
	ctx        context.Context
	ApiService *PlatformsApiService
	apikey     *string
	name       *string
	fields     *string
}

// (Required)
func (r ApiPlatformsByPlatformNameRequest) Apikey(apikey string) ApiPlatformsByPlatformNameRequest {
	r.apikey = &apikey
	return r
}

// (Required)
func (r ApiPlatformsByPlatformNameRequest) Name(name string) ApiPlatformsByPlatformNameRequest {
	r.name = &name
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60;
func (r ApiPlatformsByPlatformNameRequest) Fields(fields string) ApiPlatformsByPlatformNameRequest {
	r.fields = &fields
	return r
}

func (r ApiPlatformsByPlatformNameRequest) Execute() (*PlatformsByPlatformName, *http.Response, error) {
	return r.ApiService.PlatformsByPlatformNameExecute(r)
}

/*
PlatformsByPlatformName Fetch platforms by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPlatformsByPlatformNameRequest
*/
func (a *PlatformsApiService) PlatformsByPlatformName(ctx context.Context) ApiPlatformsByPlatformNameRequest {
	return ApiPlatformsByPlatformNameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return PlatformsByPlatformName
func (a *PlatformsApiService) PlatformsByPlatformNameExecute(r ApiPlatformsByPlatformNameRequest) (*PlatformsByPlatformName, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PlatformsByPlatformName
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformsApiService.PlatformsByPlatformName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Platforms/ByPlatformName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlatformsImagesRequest struct {
	ctx         context.Context
	ApiService  *PlatformsApiService
	apikey      *string
	platformsId *string
	filterType  *string
	page        *int32
}

// (Required)
func (r ApiPlatformsImagesRequest) Apikey(apikey string) ApiPlatformsImagesRequest {
	r.apikey = &apikey
	return r
}

// (Required) - platform(s) &#x60;id&#x60; can be obtain from the above platforms api, supports &#x60;,&#x60; delimited list
func (r ApiPlatformsImagesRequest) PlatformsId(platformsId string) ApiPlatformsImagesRequest {
	r.platformsId = &platformsId
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;fanart&#x60;, &#x60;banner&#x60;, &#x60;boxart&#x60;
func (r ApiPlatformsImagesRequest) FilterType(filterType string) ApiPlatformsImagesRequest {
	r.filterType = &filterType
	return r
}

// (Optional) - results page offset to return
func (r ApiPlatformsImagesRequest) Page(page int32) ApiPlatformsImagesRequest {
	r.page = &page
	return r
}

func (r ApiPlatformsImagesRequest) Execute() (*PlatformsImages, *http.Response, error) {
	return r.ApiService.PlatformsImagesExecute(r)
}

/*
PlatformsImages Fetch platform(s) images by platform(s) id

results can be filtered with `filter[type]` param

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPlatformsImagesRequest
*/
func (a *PlatformsApiService) PlatformsImages(ctx context.Context) ApiPlatformsImagesRequest {
	return ApiPlatformsImagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return PlatformsImages
func (a *PlatformsApiService) PlatformsImagesExecute(r ApiPlatformsImagesRequest) (*PlatformsImages, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PlatformsImages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformsApiService.PlatformsImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Platforms/Images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.platformsId == nil {
		return localVarReturnValue, nil, reportError("platformsId is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("platforms_id", parameterToString(*r.platformsId, ""))
	if r.filterType != nil {
		localVarQueryParams.Add("filter[type]", parameterToString(*r.filterType, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
