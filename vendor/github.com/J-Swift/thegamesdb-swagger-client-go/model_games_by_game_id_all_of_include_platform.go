/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"encoding/json"
)

// GamesByGameIDAllOfIncludePlatform struct for GamesByGameIDAllOfIncludePlatform
type GamesByGameIDAllOfIncludePlatform struct {
	Data map[string]PlatformSkinny `json:"data"`
}

// NewGamesByGameIDAllOfIncludePlatform instantiates a new GamesByGameIDAllOfIncludePlatform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamesByGameIDAllOfIncludePlatform(data map[string]PlatformSkinny) *GamesByGameIDAllOfIncludePlatform {
	this := GamesByGameIDAllOfIncludePlatform{}
	this.Data = data
	return &this
}

// NewGamesByGameIDAllOfIncludePlatformWithDefaults instantiates a new GamesByGameIDAllOfIncludePlatform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamesByGameIDAllOfIncludePlatformWithDefaults() *GamesByGameIDAllOfIncludePlatform {
	this := GamesByGameIDAllOfIncludePlatform{}
	return &this
}

// GetData returns the Data field value
func (o *GamesByGameIDAllOfIncludePlatform) GetData() map[string]PlatformSkinny {
	if o == nil {
		var ret map[string]PlatformSkinny
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *GamesByGameIDAllOfIncludePlatform) GetDataOk() (*map[string]PlatformSkinny, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *GamesByGameIDAllOfIncludePlatform) SetData(v map[string]PlatformSkinny) {
	o.Data = v
}

func (o GamesByGameIDAllOfIncludePlatform) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGamesByGameIDAllOfIncludePlatform struct {
	value *GamesByGameIDAllOfIncludePlatform
	isSet bool
}

func (v NullableGamesByGameIDAllOfIncludePlatform) Get() *GamesByGameIDAllOfIncludePlatform {
	return v.value
}

func (v *NullableGamesByGameIDAllOfIncludePlatform) Set(val *GamesByGameIDAllOfIncludePlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableGamesByGameIDAllOfIncludePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableGamesByGameIDAllOfIncludePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamesByGameIDAllOfIncludePlatform(val *GamesByGameIDAllOfIncludePlatform) *NullableGamesByGameIDAllOfIncludePlatform {
	return &NullableGamesByGameIDAllOfIncludePlatform{value: val, isSet: true}
}

func (v NullableGamesByGameIDAllOfIncludePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamesByGameIDAllOfIncludePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
