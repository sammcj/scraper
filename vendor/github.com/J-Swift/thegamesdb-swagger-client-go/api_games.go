/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// GamesApiService GamesApi service
type GamesApiService service

type ApiGamesByGameIDRequest struct {
	ctx        context.Context
	ApiService *GamesApiService
	apikey     *string
	id         *string
	fields     *string
	include    *string
	page       *int32
}

// (Required)
func (r ApiGamesByGameIDRequest) Apikey(apikey string) ApiGamesByGameIDRequest {
	r.apikey = &apikey
	return r
}

// (Required) - supports &#x60;,&#x60; delimited list
func (r ApiGamesByGameIDRequest) Id(id string) ApiGamesByGameIDRequest {
	r.id = &id
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60;
func (r ApiGamesByGameIDRequest) Fields(fields string) ApiGamesByGameIDRequest {
	r.fields = &fields
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60;
func (r ApiGamesByGameIDRequest) Include(include string) ApiGamesByGameIDRequest {
	r.include = &include
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesByGameIDRequest) Page(page int32) ApiGamesByGameIDRequest {
	r.page = &page
	return r
}

func (r ApiGamesByGameIDRequest) Execute() (*GamesByGameID, *http.Response, error) {
	return r.ApiService.GamesByGameIDExecute(r)
}

/*
GamesByGameID Fetch game(s) by id

can request additional information can be requestes through `fields` and `include` params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesByGameIDRequest
*/
func (a *GamesApiService) GamesByGameID(ctx context.Context) ApiGamesByGameIDRequest {
	return ApiGamesByGameIDRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesByGameID
func (a *GamesApiService) GamesByGameIDExecute(r ApiGamesByGameIDRequest) (*GamesByGameID, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesByGameID
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesByGameID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Games/ByGameID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGamesByGameNameRequest struct {
	ctx            context.Context
	ApiService     *GamesApiService
	apikey         *string
	name           *string
	fields         *string
	filterPlatform *string
	include        *string
	page           *int32
}

// (Required)
func (r ApiGamesByGameNameRequest) Apikey(apikey string) ApiGamesByGameNameRequest {
	r.apikey = &apikey
	return r
}

// (Required) - Search term
func (r ApiGamesByGameNameRequest) Name(name string) ApiGamesByGameNameRequest {
	r.name = &name
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60;
func (r ApiGamesByGameNameRequest) Fields(fields string) ApiGamesByGameNameRequest {
	r.fields = &fields
	return r
}

// (Optional) - platform &#x60;id&#x60; can be obtain from the platforms api below, supports &#x60;,&#x60; delimited list
func (r ApiGamesByGameNameRequest) FilterPlatform(filterPlatform string) ApiGamesByGameNameRequest {
	r.filterPlatform = &filterPlatform
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60;
func (r ApiGamesByGameNameRequest) Include(include string) ApiGamesByGameNameRequest {
	r.include = &include
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesByGameNameRequest) Page(page int32) ApiGamesByGameNameRequest {
	r.page = &page
	return r
}

func (r ApiGamesByGameNameRequest) Execute() (*GamesByGameID, *http.Response, error) {
	return r.ApiService.GamesByGameNameExecute(r)
}

/*
GamesByGameName Fetch game(s) by name

can request additional information can be requestes through `fields` and `include` params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesByGameNameRequest
*/
func (a *GamesApiService) GamesByGameName(ctx context.Context) ApiGamesByGameNameRequest {
	return ApiGamesByGameNameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesByGameID
func (a *GamesApiService) GamesByGameNameExecute(r ApiGamesByGameNameRequest) (*GamesByGameID, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesByGameID
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesByGameName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.1/Games/ByGameName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGamesByGameNameV1Request struct {
	ctx            context.Context
	ApiService     *GamesApiService
	apikey         *string
	name           *string
	fields         *string
	filterPlatform *string
	include        *string
	page           *int32
}

// (Required)
func (r ApiGamesByGameNameV1Request) Apikey(apikey string) ApiGamesByGameNameV1Request {
	r.apikey = &apikey
	return r
}

// (Required) - Search term
func (r ApiGamesByGameNameV1Request) Name(name string) ApiGamesByGameNameV1Request {
	r.name = &name
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60;
func (r ApiGamesByGameNameV1Request) Fields(fields string) ApiGamesByGameNameV1Request {
	r.fields = &fields
	return r
}

// (Optional) - platform &#x60;id&#x60; can be obtain from the platforms api below, supports &#x60;,&#x60; delimited list
func (r ApiGamesByGameNameV1Request) FilterPlatform(filterPlatform string) ApiGamesByGameNameV1Request {
	r.filterPlatform = &filterPlatform
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60;
func (r ApiGamesByGameNameV1Request) Include(include string) ApiGamesByGameNameV1Request {
	r.include = &include
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesByGameNameV1Request) Page(page int32) ApiGamesByGameNameV1Request {
	r.page = &page
	return r
}

func (r ApiGamesByGameNameV1Request) Execute() (*GamesByGameIDV1, *http.Response, error) {
	return r.ApiService.GamesByGameNameV1Execute(r)
}

/*
GamesByGameNameV1 Fetch game(s) by name

can request additional information can be requestes through `fields` and `include` params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesByGameNameV1Request
*/
func (a *GamesApiService) GamesByGameNameV1(ctx context.Context) ApiGamesByGameNameV1Request {
	return ApiGamesByGameNameV1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesByGameIDV1
func (a *GamesApiService) GamesByGameNameV1Execute(r ApiGamesByGameNameV1Request) (*GamesByGameIDV1, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesByGameIDV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesByGameNameV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Games/ByGameName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGamesByPlatformIDRequest struct {
	ctx        context.Context
	ApiService *GamesApiService
	apikey     *string
	id         *string
	fields     *string
	include    *string
	page       *int32
}

// (Required)
func (r ApiGamesByPlatformIDRequest) Apikey(apikey string) ApiGamesByPlatformIDRequest {
	r.apikey = &apikey
	return r
}

// (Required) - platform &#x60;id&#x60; can be obtain from the platforms api below, supports &#x60;,&#x60; delimited list
func (r ApiGamesByPlatformIDRequest) Id(id string) ApiGamesByPlatformIDRequest {
	r.id = &id
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60;
func (r ApiGamesByPlatformIDRequest) Fields(fields string) ApiGamesByPlatformIDRequest {
	r.fields = &fields
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60;
func (r ApiGamesByPlatformIDRequest) Include(include string) ApiGamesByPlatformIDRequest {
	r.include = &include
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesByPlatformIDRequest) Page(page int32) ApiGamesByPlatformIDRequest {
	r.page = &page
	return r
}

func (r ApiGamesByPlatformIDRequest) Execute() (*GamesByGameID, *http.Response, error) {
	return r.ApiService.GamesByPlatformIDExecute(r)
}

/*
GamesByPlatformID Fetch game(s) by platform id

can request additional information can be requested through `fields` and `include` params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesByPlatformIDRequest
*/
func (a *GamesApiService) GamesByPlatformID(ctx context.Context) ApiGamesByPlatformIDRequest {
	return ApiGamesByPlatformIDRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesByGameID
func (a *GamesApiService) GamesByPlatformIDExecute(r ApiGamesByPlatformIDRequest) (*GamesByGameID, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesByGameID
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesByPlatformID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Games/ByPlatformID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGamesImagesRequest struct {
	ctx        context.Context
	ApiService *GamesApiService
	apikey     *string
	gamesId    *string
	filterType *string
	page       *int32
}

// (Required)
func (r ApiGamesImagesRequest) Apikey(apikey string) ApiGamesImagesRequest {
	r.apikey = &apikey
	return r
}

// (Required) - game(s) &#x60;id&#x60; can be obtain from the above games api, supports &#x60;,&#x60; delimited list
func (r ApiGamesImagesRequest) GamesId(gamesId string) ApiGamesImagesRequest {
	r.gamesId = &gamesId
	return r
}

// (Optional) - valid &#x60;,&#x60; delimited options: &#x60;fanart&#x60;, &#x60;banner&#x60;, &#x60;boxart&#x60;, &#x60;screenshot&#x60;, &#x60;clearlogo&#x60;
func (r ApiGamesImagesRequest) FilterType(filterType string) ApiGamesImagesRequest {
	r.filterType = &filterType
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesImagesRequest) Page(page int32) ApiGamesImagesRequest {
	r.page = &page
	return r
}

func (r ApiGamesImagesRequest) Execute() (*GamesImages, *http.Response, error) {
	return r.ApiService.GamesImagesExecute(r)
}

/*
GamesImages Fetch game(s) images by game(s) id

results can be filtered with `filter[type]` param

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesImagesRequest
*/
func (a *GamesApiService) GamesImages(ctx context.Context) ApiGamesImagesRequest {
	return ApiGamesImagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesImages
func (a *GamesApiService) GamesImagesExecute(r ApiGamesImagesRequest) (*GamesImages, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesImages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Games/Images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.gamesId == nil {
		return localVarReturnValue, nil, reportError("gamesId is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("games_id", parameterToString(*r.gamesId, ""))
	if r.filterType != nil {
		localVarQueryParams.Add("filter[type]", parameterToString(*r.filterType, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGamesUpdatesRequest struct {
	ctx        context.Context
	ApiService *GamesApiService
	apikey     *string
	lastEditId *int32
	time       *int32
	page       *int32
}

// (Required)
func (r ApiGamesUpdatesRequest) Apikey(apikey string) ApiGamesUpdatesRequest {
	r.apikey = &apikey
	return r
}

// (Required)
func (r ApiGamesUpdatesRequest) LastEditId(lastEditId int32) ApiGamesUpdatesRequest {
	r.lastEditId = &lastEditId
	return r
}

// (Optional)
func (r ApiGamesUpdatesRequest) Time(time int32) ApiGamesUpdatesRequest {
	r.time = &time
	return r
}

// (Optional) - results page offset to return
func (r ApiGamesUpdatesRequest) Page(page int32) ApiGamesUpdatesRequest {
	r.page = &page
	return r
}

func (r ApiGamesUpdatesRequest) Execute() (*GamesUpdates, *http.Response, error) {
	return r.ApiService.GamesUpdatesExecute(r)
}

/*
GamesUpdates Fetch games update

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGamesUpdatesRequest
*/
func (a *GamesApiService) GamesUpdates(ctx context.Context) ApiGamesUpdatesRequest {
	return ApiGamesUpdatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return GamesUpdates
func (a *GamesApiService) GamesUpdatesExecute(r ApiGamesUpdatesRequest) (*GamesUpdates, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GamesUpdates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesApiService.GamesUpdates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/Games/Updates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.lastEditId == nil {
		return localVarReturnValue, nil, reportError("lastEditId is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("last_edit_id", parameterToString(*r.lastEditId, ""))
	if r.time != nil {
		localVarQueryParams.Add("time", parameterToString(*r.time, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
