/*
TheGamesDB API

API Documentation

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamesdb

import (
	"encoding/json"
)

// GamesImagesAllOfData struct for GamesImagesAllOfData
type GamesImagesAllOfData struct {
	Count   int32                  `json:"count"`
	BaseUrl ImageBaseUrlMeta       `json:"base_url"`
	Images  map[string][]GameImage `json:"images"`
}

// NewGamesImagesAllOfData instantiates a new GamesImagesAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamesImagesAllOfData(count int32, baseUrl ImageBaseUrlMeta, images map[string][]GameImage) *GamesImagesAllOfData {
	this := GamesImagesAllOfData{}
	this.Count = count
	this.BaseUrl = baseUrl
	this.Images = images
	return &this
}

// NewGamesImagesAllOfDataWithDefaults instantiates a new GamesImagesAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamesImagesAllOfDataWithDefaults() *GamesImagesAllOfData {
	this := GamesImagesAllOfData{}
	return &this
}

// GetCount returns the Count field value
func (o *GamesImagesAllOfData) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GamesImagesAllOfData) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *GamesImagesAllOfData) SetCount(v int32) {
	o.Count = v
}

// GetBaseUrl returns the BaseUrl field value
func (o *GamesImagesAllOfData) GetBaseUrl() ImageBaseUrlMeta {
	if o == nil {
		var ret ImageBaseUrlMeta
		return ret
	}

	return o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value
// and a boolean to check if the value has been set.
func (o *GamesImagesAllOfData) GetBaseUrlOk() (*ImageBaseUrlMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseUrl, true
}

// SetBaseUrl sets field value
func (o *GamesImagesAllOfData) SetBaseUrl(v ImageBaseUrlMeta) {
	o.BaseUrl = v
}

// GetImages returns the Images field value
func (o *GamesImagesAllOfData) GetImages() map[string][]GameImage {
	if o == nil {
		var ret map[string][]GameImage
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *GamesImagesAllOfData) GetImagesOk() (*map[string][]GameImage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Images, true
}

// SetImages sets field value
func (o *GamesImagesAllOfData) SetImages(v map[string][]GameImage) {
	o.Images = v
}

func (o GamesImagesAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["base_url"] = o.BaseUrl
	}
	if true {
		toSerialize["images"] = o.Images
	}
	return json.Marshal(toSerialize)
}

type NullableGamesImagesAllOfData struct {
	value *GamesImagesAllOfData
	isSet bool
}

func (v NullableGamesImagesAllOfData) Get() *GamesImagesAllOfData {
	return v.value
}

func (v *NullableGamesImagesAllOfData) Set(val *GamesImagesAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableGamesImagesAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableGamesImagesAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamesImagesAllOfData(val *GamesImagesAllOfData) *NullableGamesImagesAllOfData {
	return &NullableGamesImagesAllOfData{value: val, isSet: true}
}

func (v NullableGamesImagesAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamesImagesAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
